#!/bin/bash -l

#PBS -N ENCSR356KRQ_subsampled
#PBS -l walltime=48:00:00
#PBS -l mem=20gb
#PBS -l nodes=1:ppn=4
#PBS -m bea

# explanation PBS parameters
# ----------------------
# PBS -N: setting name of job, this will appear in "$ qstat"
# PBS -l walltime:
#  walltime for the job
#   give long time enough to finish your pipeline
#   <12 hr: small/test samples
#   >24 hr: large samples
# PBS -l mem:
#   total amount of memory
#     depends on the size of your FASTQs
#     but should be <= NUM_CONCURRENT_TASK x 20GB for big samples
#     or <= NUM_CONCURRENT_TASK x 10GB for small samples
#     do not request too much memory
#     cluster will not accept your job
# PBS -l nodes:
#   max number of cpus for each pipeline
#     should be <= NUM_CONCURRENT_TASK x "atac.bowtie2_cpu" in input JSON file
#     since bowtie2 is a bottlenecking task in the pipeline
#     "atac.bowtie2_cpu" is a number of cpus per replicate

# load java module if it exists
module load Java || true

# activate pipeline's Conda environment if Conda env exists
source activate encode-atac-seq-pipeline

# use input JSON for a small test sample
#  you make an input JSON for your own sample
#  start from any of two templates for single-ended and paired-ended samples
#  (examples/template_se.json, examples/template_pe.json)
#  do not use an input JSON file for a test sample (ENCSR356KRQ)
#  it's a sample with multimapping reads
INPUT=examples/local/ENCSR356KRQ_subsampled.json

# If this pipeline fails, then use this metadata JSON file to resume a failed pipeline from where it left
# See details in /utils/resumer/README.md
PIPELINE_METADATA=metadata-$PBS_JOBID.json

# limit number of concurrent tasks
#  we recommend to use a number of replicates here
#  so that all replicates are processed in parellel at the same time.
#  make sure that resource settings in your input JSON file
#  are consistent with SBATCH resource settings (--mem, --cpus-per-task)
#  in this script
NUM_CONCURRENT_TASK=2


cd $PBS_O_WORKDIR
echo submit directory: $PWD
echo jobid: $PBS_JOBID
echo hostname: $HOSTNAME
date
echo --- Start Job ---
# run pipeline
java -jar -Dconfig.file=backends/backend.conf \
-Dbackend.providers.Local.config.concurrent-job-limit=${NUM_CONCURRENT_TASK} \
$PBS_O_WORKDIR/cromwell-34.jar run atac.wdl -i ${INPUT} -m ${PIPELINE_METADATA}
echo ---- End Job ----
date
